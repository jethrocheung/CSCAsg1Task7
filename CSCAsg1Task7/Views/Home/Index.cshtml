<div class="jumbotron">
    <script type="text/javascript" src="https://sdk.clarifai.com/js/clarifai-latest.js"></script>

    <div class="container">
        <div class="upload-photo">
            <br />
            <input class="file-upload" type="file" onchange="uploadImage()">
            <div class="photo-container">
                <img class="photo" src="" alt="Image preview">
            </div>
        </div>
        <div class="analysis" id="analysis">
        </div>
    </div>
</div>
    <script>
        var clarifaiApiKey = '4b76b374e36f4c7ea6bda3d09883ffd9';
        var workflowId = 'task7workflows';

        var app = new Clarifai.App({
            apiKey: clarifaiApiKey
        });

        // Handles image upload
        function uploadImage() {
            var preview = document.querySelector('img');
            var file = document.querySelector('input[type=file]').files[0];
            var reader = new FileReader();

            reader.addEventListener("load", function () {
                preview.src = reader.result;
                var imageData = reader.result;
                imageData = imageData.replace(/^data:image\/(.*);base64,/, '');
                predictFromWorkflow(imageData);
            }, false);

            if (file) {
                reader.readAsDataURL(file);
                preview.style.display = "inherit";
            }
        }

        // Analyzes image provided with Clarifai's Workflow API
        function predictFromWorkflow(photoUrl) {
            app.workflow.predict(workflowId, { base64: photoUrl }).then(
                function (response) {
                    var outputs = response.results[0].outputs;
                    var analysis = $(".analysis");

                    analysis.empty();
                    console.log(outputs);

                    outputs.forEach(function (output) {
                        var modelName = getModelName(output);

                        // Create heading for each section
                        var newModelSection = document.createElement("div");
                        newModelSection.className = modelName + " modal-container";

                        var newModelHeader = document.createElement("h2");
                        newModelHeader.innerHTML = modelName;
                        newModelHeader.className = "model-header";

                        var formattedString = getFormattedString(output);
                        var newModelText = document.createElement("p");
                        newModelText.innerHTML = formattedString;
                        newModelText.className = "model-text";

                        newModelSection.append(newModelHeader);
                        newModelSection.append(newModelText);
                        analysis.append(newModelSection);
                    });
                },
                function (err) {
                    console.log(err);
                }
            );
        }

        // Helper function to get model name
        function getModelName(output) {
            if (output.model.display_name !== undefined) {
                return output.model.display_name;
            } else if (output.model.name !== undefined) {
                return output.model.name;
            } else {
                return "";
            }
        }

        // Helper function to get output customized for each model
        function getFormattedString(output) {
            var formattedString = "";
            var data = output.data;
            var maxItems = 20;
            // General - To be duplicated when there are more than one model. remember to change the version id
            if (output.model.model_version.id === "aa9ca48295b37401f8af92ad1af0d91d") {
                var items = data.concepts;
                if (items.length < maxItems) {
                    maxItems = items.length;
                    if (maxItems === 1) {
                        formattedString = "The thing we are most confident in detecting is:";
                    }
                } else {
                    formattedString = "The " + maxItems + " things we are most confident in detecting are:";
                }

                for (var i = 0; i < maxItems; i++) {
                    formattedString += "<br/>- " + items[i].name + " at a " + (Math.round(items[i].value * 10000) / 100) + "% probability";
                }
            }
            // Apparel 
            else if (output.model.model_version.id === "dc2cd6d9bff5425a80bfe0c4105583c1") {
                var items = data.concepts;
                if (items.length < maxItems) {
                    maxItems = items.length;
                    if (maxItems === 1) {
                        formattedString = "The piece of apparel we are most confident in detecting is:";
                    }
                } else {
                    formattedString = "The " + maxItems + " pieces of apparel we are most confident in detecting are:";
                }

                for (var i = 0; i < maxItems; i++) {
                    formattedString += "<br/>- " + items[i].name + " at a " + (Math.round(items[i].value * 10000) / 100) + "% probability";
                }
            }

            return formattedString;
        }
    </script>
    <style>
        body {
            margin: 0;
        }

        .header {
            background-color: #2E68FB;
            height: 100%;
            margin: 0;
            padding: 2vh 1vw;
            color: white;
        }

        .header-text {
            margin: 0;
        }

        .container {
            display: flex;
            flex-direction: row;
            margin: 2vh 2vw;
        }

        .upload-photo {
            margin-right: 4vw;
        }

        .file-upload {
            margin-bottom: 2vh;
        }

        .analysis {
            display: flex;
            flex-wrap: wrap;
            flex-direction: row;
        }

        .modal-container {
            width: 30vw;
            margin: 1vh 1vw;
        }

        .photo {
            display: none;
            width: 20vw;
        }
    </style>
